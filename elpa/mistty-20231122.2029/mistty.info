This is mistty.info, produced by makeinfo version 6.7 from mistty.texi.

     MisTTY 1.0.9

     Stephane Zermatten

     Copyright © 2023, Stephane Zermatten

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* MisTTY: (mistty.info). Shell/comint alternative with a fully-functional
                        terminal
END-INFO-DIR-ENTRY


   Generated by Sphinx.


File: mistty.info,  Node: Top,  Next: Comparison with other packages,  Up: (dir)

MisTTY
******

     MisTTY 1.0.9

     Stephane Zermatten

     Copyright © 2023, Stephane Zermatten

‘MisTTY’ is a major mode for ‘Emacs’ 29.1 and up that runs a shell
inside of a buffer, similarly to comint mode.  It is built on top of
‘term.el’.  Check out its project page at
‘https://github.com/szermatt/mistty’.

‘M-x mistty’ creates a buffer with an interactive shell.  See *note
Launching: 1. for details.

MisTTY feels very much like comint mode: you can move around freely and
run any Emacs command you want - until you press TAB and end up with the
native completion or notice the shell autosuggestions.  With MisTTY you
have access to both Emacs and the shell commands and editing tools.

Additionally, commands that take over the *note entire screen: 2, such
as ‘less’ or ‘vi’ also work, temporarily taking over the window, while
scrollback remains available in another buffer.

MisTTY is known to work on Linux and MacOS. It also supports non-shell
command-line programs, such as ‘python’.

The latest version of this documentation is available at
‘https://mistty.readthedocs.io/en/latest/’.  Once MisTTY is installed,
this documentation can be accessed from inside Emacs using ‘M-x info
gmistty’

     Note: If you encounter issues, please take the time to file a bug.
     See *note Reporting issues: 3. for details.

* Menu:

* Comparison with other packages::
* Contents::
* Index::


File: mistty.info,  Node: Comparison with other packages,  Next: Contents,  Prev: Top,  Up: Top

1 Comparison with other packages
********************************

MisTTY isn’t a terminal emulator, but rather a frontend to an existing
terminal emulator, the built-in ‘term.el’.  Its goal is to make it more
convenient to use while inside of Emacs and better integrate with Emacs
itself.  In theory, other terminal emulators than ‘term.el’ might be
used as engine for MisTTY, such as ‘vterm’ and ‘eat’.

MisTTY has some similarities with ‘coterm’; it offers the same switch
between full-screen and line mode.

‘Coterm’, ‘ansi-term’ and ‘eat’ all have a line mode, just like ‘comint’
does, which allows you to edit a command line as a whole before sending
it to the shell.  While in line mode, rendering is done by Emacs and
editing commands are Emacs commands.  In constrast, with MisTTY, all
rendering is done by the shell through the terminal.  This is why native
shell completion and autosuggestion is available with MisTTY and not in
line modes and why you can freely mix shell commands with Emacs commands
while editing the command line.

‘ansi-term’ and ‘eat’ also have a char mode, where rendering and command
execution is handled by the shell, and editing with Emacs isn’t
available.  The difference with MisTTY is then that MisTTY makes Emacs
editing commands available when possible.

‘eat’ also has a semi-char mode, which is the closest there is to
MisTTY. In that mode, Emacs movements commands are available.  However,
Emacs commands that modify the buffer, aren’t available to edit the
command line.  In contrast, MisTTY allows Emacs to navigate to and edit
the whole buffer, then replays changes made to the command-line.


File: mistty.info,  Node: Contents,  Next: Index,  Prev: Comparison with other packages,  Up: Top

2 Contents
**********

* Menu:

* Usage::
* Shells::
* Extending MisTTY::
* FAQ::
* Contributing::


File: mistty.info,  Node: Usage,  Next: Shells,  Up: Contents

2.1 Usage
=========

* Menu:

* Installation::
* Launching::
* Terminal vs. Scrollback: Terminal vs Scrollback.
* Navigating the scrollback zone::
* Fullscreen Mode::
* Command History::
* Directory tracking and TRAMP::
* Completion-at-point::
* Template Expansion::
* Fancy prompts::


File: mistty.info,  Node: Installation,  Next: Launching,  Up: Usage

2.1.1 Installation
------------------

To use MisTTY, first install its package,

        - from MELPA or MELPA Stable(1), using ‘M-x package-install
          mistty’

        - from source using ‘M-x package-vc-install
          https://github.com/szermatt/mistty’

You can then call it, as described in *note Launching: 1.

However, you’ll likely want to configure it and add some key bindings
you use often in shells, for example:

     (use-package mistty
       :bind (("C-c s" . mistty) ;; or mistty-in-project

              ;; bind here the shortcuts you'd like the
              ;; shell to handle instead of Emacs.
              :map mistty-prompt-map

              ;; fish: dir history, more history manipulation
              ("M-<up>" . mistty-send-key)
              ("M-<down>" . mistty-send-key)
              ("M-<left>" . mistty-send-key)
              ("M-<right>" . mistty-send-key)))

Read on for details on the commands and key bindings configured above.

   ---------- Footnotes ----------

   (1) https://melpa.org/#/getting-started


File: mistty.info,  Node: Launching,  Next: Terminal vs Scrollback,  Prev: Installation,  Up: Usage

2.1.2 Launching
---------------

To create a new interactive shell buffer in MisTTY mode, call ‘M-x
mistty’ or ‘M-x mistty-create’.  If you use MisTTY regularly, you’ll
want to bind some of these to global shortcuts:

        - ‘M-x mistty-create’ launches a new interactive shell in a
          MisTTY buffer.  The shell that is launched is the one that’s
          configured on ‘M-x configure-option explicit-shell-file-name’

          If ‘explicit-shell-file-name’ is unset, MisTTY falls back to
          ‘shell-file-name’, then the environment variables ‘ESHELL’ and
          ‘SHELL’.

          ‘M-x customize-option display-comint-buffer-action’ lets you
          configure how the buffer is displayed.

        - ‘M-x mistty-create-other-window’ does the same, but opens the
          buffer in another window.

        - ‘M-x mistty’ creates a new MisTTY buffer the first time it is
          called.  Afterwards, it’ll try to guess what’s most
          appropriate, displaying an existing MisTTY buffer or creating
          a new one.

          With a prefix argument, this command always creates a new
          buffer.

        - ‘M-x mistty-other-window’ does the same, but opens the buffer
          in another window.

        - ‘M-x mistty-in-project’ creates a new MisTTY buffer in the
          root directory of the current project the first time it is
          called.  Afterwards, it’ll try to guess what’s most
          appropriate, displaying an existing MisTTY buffer or creating
          a new one.

          With a prefix argument, this command always creates a new
          buffer.

          Note that if you want ‘M-x project-kill-buffers’ to kill such
          buffers, you’ll want to execute
          ‘mistty-project-init-kill-buffer’ somewhere in your
          configuration or tell ‘M-x configure-option
          project-kill-buffer-conditions’ about MisTTY.


File: mistty.info,  Node: Terminal vs Scrollback,  Next: Navigating the scrollback zone,  Prev: Launching,  Up: Usage

2.1.3 Terminal vs. Scrollback
-----------------------------

MisTTY buffers are split into two zones, with different behaviors:

The ‘scrollback zone’, is where you can see commands that have been
executed and their output.

The ‘terminal zone’, marked by a purple line on the left of the window,
is where you can type command and interact with the terminal.  In this
zone, ‘TAB’ triggers the shell completion, if available.  With some
shells, you’ll see autosuggestions as you type.

The scrollback zone behaves as a normal Emacs buffer.  You can modify it
as you see fit.

The terminal zone, on the other hand, limits what you can do: When a
shell is attached to the terminal, you can edit the command you’re about
to run, but you can’t edit the prompt itself - or rather, if you do
change the prompt, your change will be undone by the shell.

The terminal zone is where the magic happens: this is where you can use
a mix of Emacs and shell key bindings to edit the command line.  The
trickiest part is choosing which key bindings you want Emacs to handle
and which key bindings you want the shell to handle.

By default, Emacs handles everything but a few key bindings are sent
directly to the terminal, bypassing Emacs:

   - ‘RET’, to ask the shell to run the command

   - ‘TAB’, to ask the shell to run command completion,

   - ‘C-a’ to ask it to move the cursor to the beginning of the line,
     and

   - ‘C-e’ to ask it to move the cursor to the end of the line.

   - ‘C-d’ to ask it to either delete the next character or exit the
     program.

   - ‘M-p’ to ask it to go up, or up the command history, sending ‘C-p’
     to the terminal.

   - ‘M-n’ to ask it to go down, or down the command history, sending
     ‘C-n’ to the terminal.

   - ‘M-r’ to ask it to do backward history search, sending ‘C-r’ to the
     terminal.

   - ‘M-.’ to ask the shell to insert the last history argument.

In addition, ‘C-c C-c’ sends the TERM signal to the terminal.

The program attached to the terminal decides what the actual effect of
these shortcuts is.  Most shells and command-line editing tools supports
the shortcuts above by default, but they might not work everywhere as
expected.

     Warning: MisTTY will not work if you’ve configured your shell to
     turn on ‘VI mode’ by default.  Please ‘turn it off’ before trying
     out MisTTY, for details on how to turn off VI mode only of MisTTY
     buffers and leave it on otherwise, check out the instructions in
     *note Shells: e. for details.  VI mode must be turned off even if
     you just end up controlling it with VI commands using Evil.

To get the most out of MisTTY, it’s worth it to take the time to
configure it to send to the terminal the shell key bindings that you
actually use and keep everything else behaving as usual for your Emacs
configuration.

To bind keys only in the terminal zone, bind them to
‘mistty-prompt-map’.  To bind keys in both zones, bind them to
‘mistty-mode-map’.  See examples below.

The following commands are useful to send key sequences to the current
shell or program controlling the terminal:

        - The command ‘mistty-send-key’, called interactively, forwards
          the key it was called from.  It is meant to be bound to the
          shell key bindings you want to work in the terminal zone map,
          ‘mistty-prompt-map’.

          For example, searching in the shell command history is usually
          bound to ‘C-r’, MisTTY binds that to ‘M-r’, like comint does,
          but if you’d like it to be accessible using the original key
          binding, you can do:

               (keymap-set mistty-prompt-map "C-r" #'mistty-send-key)

          If you’d prefer to have the key available in both the
          scrollback and terminal zones, bind it ‘mistty-mode-map’
          instead.

          You can also pass arbitrary keys to ‘mistty-send-key’, for
          example:

               (defun my-mistty-M-s (n)
                 (interactive "p")
                 (mistty-send-key n (kbd "M-s")))
               (keymap-set mistty-prompt-map "C-c a" #'my-mistty-M-s)

        - The command ‘mistty-send-last-key’ forwards the last key
          combination of a sequence it was called from to the terminal.
          For example, ‘C-c C-c’ is bound to ‘mistty-send-last-key’ so
          that the terminal eventually just gets ‘C-c’.

To just try things out, or for shell shortcuts you don’t use regularly,
you can use the ‘C-q’ prefix to bypass Emacs key bindings and send keys
directly to the terminal.  For example, ‘C-q <right>’ sends a right
arrow key press to the terminal instead of moving the cursor.

If that’s not enough,

        - ‘C-c C-q’, ‘M-x mistty-send-key-sequence’ sends all keys you
          press to the terminal until you press ‘C-g’.


File: mistty.info,  Node: Navigating the scrollback zone,  Next: Fullscreen Mode,  Prev: Terminal vs Scrollback,  Up: Usage

2.1.4 Navigating the scrollback zone
------------------------------------

        - ‘C-e C-e’ moves the point back inside the prompt.  This is
          handled by the interactive function
          ‘mistty-end-of-line-or-goto-cursor’

        - ‘M-x mistty-goto-cursor’ also moves the point back inside the
          prompt.  You can bind it to a custom shortcut if you don’t
          like overloading C-e.

        - ‘C-c C-p’ or ‘M-x mistty-goto-previous-output’ goes to the
          beginning of the previous command output.  This is useful to
          if the buffer has scrolled too far and you want to see it from
          the beginning.

        - ‘C-c C-n’ or ‘M-x mistty-goto-next-output’ does the reverse,
          that is, it goes to the next command output.

        - ‘C-c C-o’ or ‘M-x mistty-select-output’ selects the command
          output at or before point.  With an argument, selects the Nth
          previous command output.

        - ‘C-c C-r’ or ‘M-x mistty-create-buffer-with-output’ creates a
          new buffer containing the command output at or before point.
          With an argument, creates a buffer containing the Nth previous
          command output.

        - ‘M-x mistty-goto-previous-input’ goes to the beginning of the
          previous command input, that is, the previous prompt.  While
          this is a way of going back the command you’ve previously
          input, it’s best to use the shell native command history, as
          discussed in *note Command History: 11.

        - ‘M-x mistty-goto-next-input’ goes to the next command input.


File: mistty.info,  Node: Fullscreen Mode,  Next: Command History,  Prev: Navigating the scrollback zone,  Up: Usage

2.1.5 Fullscreen Mode
---------------------

MisTTY detects when a program such as ‘less’ or ‘vi’ asks to run full
screen and splits the MisTTY buffers into:

   - a terminal buffer, which shows the program output and lets you
     interact with it.  This is a term-mode buffer.

   - a scrollback buffer, which shows the previous command lines and
     their output.

‘C-c C-j’ or ‘M-x mistty-toggle-buffers’ switches between these two.

When the program exits, the two buffers are again merged.  Note that the
output of the full screen app isn’t available in the scrollback.


File: mistty.info,  Node: Command History,  Next: Directory tracking and TRAMP,  Prev: Fullscreen Mode,  Up: Usage

2.1.6 Command History
---------------------

MisTTY doesn’t track command history.  It relies instead on being able
to access the history of the different interactive command-line tools.

The command history available in most shells and command-line editing
tools is available in MisTTY using the following shortcuts:

   - ‘M-p’ moves up command history

   - ‘M-n’ moves down command history

   - ‘M-r’ triggers a backward search in command history

   - ‘M-.’ insert the last argument from command history

To get the same key bindings you’d get in a normal terminal, you can
bind ‘C-p’, ‘C-n’, or ‘C-r’ to ‘mistty-send-key’ in the terminal zone of
the MisTTY buffer.  For example:

     (keymap-set mistty-prompt-map "C-p" #'mistty-send-key)
     (keymap-set mistty-prompt-map "C-n" #'mistty-send-key)
     (keymap-set mistty-prompt-map "C-r" #'mistty-send-key)


File: mistty.info,  Node: Directory tracking and TRAMP,  Next: Completion-at-point,  Prev: Command History,  Up: Usage

2.1.7 Directory tracking and TRAMP
----------------------------------

In order for Emacs to know your shell’s current directory, the shell has
to tell MisTTY about it.  This is usually done from the prompt.

‘Bash’ does it by default, for local shells, when it detects a terminal
of type ‘TERM=eterm-color’ run from inside Emacs.

Other shells need to be configured to do the same.  For more details,
see *note Shells: e.

If you have configured TRAMP and know that the hosts you ssh into are
accessible with the default TRAMP method, you might consider allowing
MisTTY to report remote paths on ‘M-x configure-option
mistty-allow-tramp-paths’.


File: mistty.info,  Node: Completion-at-point,  Next: Template Expansion,  Prev: Directory tracking and TRAMP,  Up: Usage

2.1.8 Completion-at-point
-------------------------

When in a MisTTY buffer, it’s best to rely on the completion or
autosuggestions provided by the shell or other command-line tool
currently running, as they’re more up-to-date and context-sensitive than
what Emacs can provide.

However, some form of Emacs-based completion can still be useful from
inside of a MisTTY buffer, to complete abbreviations, expand templates
or add emojis.

The following completion packages are known to work with MisTTY out of
the box, including auto-completion, if enabled:

   - Emacs builtin ‘complete-in-region’

   - corfu(1)

   - company-mode(2)

Emacs ‘hippie-expand’ also works.  That’s not completion, but it’s
close.

Other packages might work or might be made to work with some efforts.
Auto-completion is usually the main challenge.  See *note Auto-complete:
17. for some pointers.  Please *note file a bug: 3. if you encounter
issues with other completion packages.

* Menu:

* Autosuggestions::

   ---------- Footnotes ----------

   (1) https://github.com/minad/corfu

   (2) http://company-mode.github.io


File: mistty.info,  Node: Autosuggestions,  Up: Completion-at-point

2.1.8.1 Autosuggestions
.......................

‘completion-at-point’ completes the text ‘around’ the point.  This is
generally convenient, but gets confused by shell autosuggestions,
available in Fish or ZSH.

What if you typed “com” and the shell helpfully suggests “completion”?
The buffer would look like: “com<>pletion”, with <> representing the
point.  ‘completion-at-point’ would then think you typed “completion”
and not suggest anything else.

To avoid that problem MisTTY modifies the functions it finds in
‘completion-at-point-functions’ so that they just won’t see anything
after the point when in the terminal region.  In the example above,
they’d only complete “com”, not “completion”.

That is, ‘completion-at-point’ in the MisTTY terminal region completes
the text ‘before’ the point.

If you don’t like that or don’t use a shell that supports
autosuggestions, you can turn this off with ‘M-x customize-option
mistty-wrap-capf-functions’


File: mistty.info,  Node: Template Expansion,  Next: Fancy prompts,  Prev: Completion-at-point,  Up: Usage

2.1.9 Template Expansion
------------------------

Template expansion and other form of long-running editing command might
be confused by the way MisTTY work in the terminal region.  See *note
Long-running commands: 1a. for details.

The following template expansion packages are known to work with MisTTY
out of the box, if enabled:

   - Emacs built-in ‘tempo’ package

   - tempel(1)

   - yasnippet(2)

Other packages might work or might be made to work with some efforts.
Please *note file a bug: 3. if you encounter issues with other packages.

   ---------- Footnotes ----------

   (1) https://github.com/minad/tempel

   (2) https://github.com/joaotavora/yasnippet


File: mistty.info,  Node: Fancy prompts,  Prev: Template Expansion,  Up: Usage

2.1.10 Fancy prompts
--------------------

MisTTY is known to work with powerline-shell prompts or Tide, on
Fish(1).  This includes right prompts, for the most part - though there
might be temporary artifacts and troublesome corner cases left.

If you suspect your shell prompt is causing issues, please first try
setting a traditional prompt to confirm, then *note file a bug: 3,
whatever the outcome.

   ---------- Footnotes ----------

   (1) https://github.com/IlanCosman/tide


File: mistty.info,  Node: Shells,  Next: Extending MisTTY,  Prev: Usage,  Up: Contents

2.2 Shells
==========

* Menu:

* Bash::
* Fish::
* Zsh::


File: mistty.info,  Node: Bash,  Next: Fish,  Up: Shells

2.2.1 Bash
----------

A recent version of Bash is preferable.  Bash 5.1 and later work best,
as bracketed paste mode is on by default in that version.

Older versions of Bash work, but with limitations, and it might behaves
unexpectedly when yanking text containing special characters.

To use Bash between 4.4 and 5.0 without these limitations, add the
following to your ‘.inputrc’:

     set enable-bracketed-paste on

* Menu:

* Multi-line prompts::
* Directory tracking::
* VI mode::


File: mistty.info,  Node: Multi-line prompts,  Next: Directory tracking,  Up: Bash

2.2.1.1 Multi-line prompts
..........................

When you press ‘RET’ on an incomplete command, ‘bash’ has the annoying
habit of starting a secondary prompt which doesn’t let you go back to
the previous line with the default keybindings.

To work around that, type ‘S-<return>’ instead of ‘RET’ while on the
terminal zone of a MisTTY buffer.  This sends a newline without running
the command.  You’ll then end up with one multi-line prompt that you can
edit normally.  This requires Bash 5.1 or an earlier version with
bracketed paste mode turned on.

You’ll get the same effect if you yank a multi-line command while in a
prompt or go up the command history to a previous multi-line command.


File: mistty.info,  Node: Directory tracking,  Next: VI mode,  Prev: Multi-line prompts,  Up: Bash

2.2.1.2 Directory tracking
..........................

Recent versions of ‘bash’ already send the current directory when they
detects that it’s called from Emacs with ‘TERM=eterm-color’, so as long
as you don’t want TRAMP remote paths, you don’t have to do anything.

If you do want to use TRAMP remote paths, extend your prompt to send out
an OSC7 sequence to have ‘bash’ send the current directory and hostname
to MisTTY.

To do that, you might add the following to ‘~/.bashrc’:

     if [ "$TERM" = "eterm-color" ]; then
       PS1='\e]7;file://$HOSTNAME$PWD\e\\\\'$PS1
     fi

Such sequence are either ignored or understood by most terminals, so you
don’t absolutely need to check TERM.


File: mistty.info,  Node: VI mode,  Prev: Directory tracking,  Up: Bash

2.2.1.3 VI mode
...............

To communicate with ‘bash’, MisTTY requires the shell to be in its
default editing mode, that is, the emacs mode.  ‘Please make sure you
haven’t put readline or bash in vi mode before trying out MisTTY.’

To turn on vi mode in readline everywhere but MisTTY, you can add
something like the following into ‘~/.inputrc’:

     $if term=eterm
       set editing-mode emacs
     $else
       set editing-mode vi
     $endif

Or, in bash ‘~/.bashrc’:

     if [ "$TERM" != "eterm-color" ]; then
       set -o vi
     fi


File: mistty.info,  Node: Fish,  Next: Zsh,  Prev: Bash,  Up: Shells

2.2.2 Fish
----------

A recent version of Fish is preferable.  MisTTY relies on bracketed
paste mode, on by default, so it should not be turned off.

* Menu:

* Autosuggestions: Autosuggestions<2>.
* Command History: Command History<2>.
* Directory tracking: Directory tracking<2>.
* Multi-line prompts: Multi-line prompts<2>.
* VI mode: VI mode<2>.


File: mistty.info,  Node: Autosuggestions<2>,  Next: Command History<2>,  Up: Fish

2.2.2.1 Autosuggestions
.......................

‘fish’ autosuggestions work normally in MisTTY. However, the usual way
of accepting an autosuggestion, pressing the right arrow key, is very
inconvenient as this is bound to an Emacs point movement.

The recommended way of accepting an autosuggestion in MisTTY is to type
‘C-e’.  This works in normal terminals as well.


File: mistty.info,  Node: Command History<2>,  Next: Directory tracking<2>,  Prev: Autosuggestions<2>,  Up: Fish

2.2.2.2 Command History
.......................

To make full use of ‘fish’ command history, you’ll want to forward some
additional shortcuts to fish:

     (keymap-set mistty-prompt-map "M-<up>" #'mistty-send-key)
     (keymap-set mistty-prompt-map "M-<down>" #'mistty-send-key)
     (keymap-set mistty-prompt-map "M-<left>" #'mistty-send-key)
     (keymap-set mistty-prompt-map "M-<right>" #'mistty-send-key)

This can also be done by calling ‘use-package’ as shown in *note
Installation: a.

When in reverse history search mode, ‘fish’ enters a mode that lets you
select an option using the arrow keys.  To send up/down/left/right
directly to ‘fish’, you can:

   - use ‘M-p’ to go up and ‘M-n’ to go down, or, if you prefer

   - use ‘C-q <up>’ ‘C-q <down>’ ‘C-q <left>’ ‘C-q <right>’, or even

   - ‘C-c C-q’ to temporarily send all send key presses to ‘fish’


File: mistty.info,  Node: Directory tracking<2>,  Next: Multi-line prompts<2>,  Prev: Command History<2>,  Up: Fish

2.2.2.3 Directory tracking
..........................

Extend your prompt to send out an OSC7 sequence to have ‘fish’ send the
current directory and hostname to MisTTY. To do that, you might add the
following to ‘~/.local/config/fish/config.fish’:

     if [ "$TERM" = "eterm-color" ]
       function osc7_send_pwd --on-event fish_prompt
         printf "\e]7;file://%s%s\e\\\\" (hostname) "$PWD"
       end
     end

such sequence are either ignored or understood by most terminals.  You
might already have it set up.


File: mistty.info,  Node: Multi-line prompts<2>,  Next: VI mode<2>,  Prev: Directory tracking<2>,  Up: Fish

2.2.2.4 Multi-line prompts
..........................

‘fish’ automatically detects when a command is incomplete when you type
‘RET’ and launches a multi-line prompt, which MisTTY knows to navigate.

The cursor jumps over indent space while on such a prompt, just like in
a normal terminal.  ‘M-x customize-option mistty-skip-empty-spaces’
allows you to turn that on or off in a MisTTY buffer.


File: mistty.info,  Node: VI mode<2>,  Prev: Multi-line prompts<2>,  Up: Fish

2.2.2.5 VI mode
...............

To communicate with ‘fish’, MisTTY requires the shell to be in its
default editing mode, that is, the emacs mode.  ‘Please make sure you
haven’t put readline or bash in vi mode before trying out MisTTY.’

To turn on vi mode in readline everywhere but in MisTTY, you can add
something like the following in ‘~/.zshrc’:

     if [ "$TERM" != "eterm-color" ]
       fish_vi_key_bindings
     end


File: mistty.info,  Node: Zsh,  Prev: Fish,  Up: Shells

2.2.3 Zsh
---------

A recent version of Zsh is preferable.

Zsh supports bracketed paste, which MisTTY relies on, since version 5.1.
Older versions will work, but with limitations, and you might get
unexpected results if you yank text containing special characters.

* Menu:

* Autosuggestions: Autosuggestions<3>.
* Directory tracking: Directory tracking<3>.
* Multi-line prompts: Multi-line prompts<3>.
* VI mode: VI mode<3>.


File: mistty.info,  Node: Autosuggestions<3>,  Next: Directory tracking<3>,  Up: Zsh

2.2.3.1 Autosuggestions
.......................

Fish-like ‘zsh’ autosuggestions work normally in MisTTY, if you’ve
turned these on.  However, the usual way of accepting an autosuggestion,
pressing the right arrow key, is very inconvenient as this is normally
bound to an Emacs point movement.

The recommended way of accepting an autosuggestion in MisTTY is to type
‘C-e’.  This works in normal terminals as well.


File: mistty.info,  Node: Directory tracking<3>,  Next: Multi-line prompts<3>,  Prev: Autosuggestions<3>,  Up: Zsh

2.2.3.2 Directory tracking
..........................

Extend your prompt to send out an OSC7 sequence to have ‘zsh’ send the
current directory and hostname to MisTTY. To do that, you might add the
following to ‘~/.zshrc’:

     if [ "$TERM" != "eterm-color" ]; then
         PS1='\e]7;file://$HOSTNAME$PWD\e\\\\'$PS1
     fi

such sequence are either ignored or understood by most terminals.


File: mistty.info,  Node: Multi-line prompts<3>,  Next: VI mode<3>,  Prev: Directory tracking<3>,  Up: Zsh

2.2.3.3 Multi-line prompts
..........................

When you press ‘RET’ on an incomplete command, ‘zsh’ has the annoying
habit of starting a secondary prompt.  MisTTY doesn’t know how to go
back to the previous prompt from such a prompt.

To work around that, type ‘S-<return>’ instead of ‘RET’ while on the
terminal zone of a MisTTY buffer.  This sends a newline without running
the command.  You’ll then end up with one multi-line prompt that you can
edit normally.  This requires a version of Zsh that supports bracketed
paste mode, 5.1 or later.

You’ll get the same effect if you yank a multi-line command while in a
prompt or go up the command history to a previous multi-line command.


File: mistty.info,  Node: VI mode<3>,  Prev: Multi-line prompts<3>,  Up: Zsh

2.2.3.4 VI mode
...............

To communicate with ‘zsh’, MisTTY requires the shell to be in its
default editing mode, that is, the emacs mode.  ‘Please make sure you
haven’t put readline or bash in vi mode before trying out MisTTY.’

To turn on vi mode in readline everywhere but in MisTTY, you can add
something like the following in ‘~/.zshrc’:

     if [ "$TERM" != "eterm-color" ]; then
       bindkey -v
     fi


File: mistty.info,  Node: Extending MisTTY,  Next: FAQ,  Prev: Shells,  Up: Contents

2.3 Extending MisTTY
====================

* Menu:

* Hooks::
* OSC Sequences::
* Writing Your Own Commands::
* Terminal Keymap::
* Auto-complete::
* Long-running commands::


File: mistty.info,  Node: Hooks,  Next: OSC Sequences,  Up: Extending MisTTY

2.3.1 Hooks
-----------

* Menu:

* mistty-mode-hook::
* mistty-interactive-insert-hook::


File: mistty.info,  Node: mistty-mode-hook,  Next: mistty-interactive-insert-hook,  Up: Hooks

2.3.1.1 mistty-mode-hook
........................

The hook ‘mistty-mode-hook’ is called on every MisTTY buffer just after
creating the buffer and selecting a window for it but before executing
the shell, with the buffer selected.

If you have enabled autocomplete or autosuggestion globally, you might
want to disable it for MisTTY buffers from a function called by
‘mistty-mode-hook’.

This hook also provides a good time to rename the buffer, change its
directory or change environment variables, to be inherited by the
process.

For example, if you wanted a more generic name for the MisTTY buffers,
you could do:

     (defun my-lets-call-it-shell ()
       (rename-buffer (generate-new-buffer-name "*shell*")))
     (add-hook 'mistty-mode-hook #'my-lets-call-it-shell)


File: mistty.info,  Node: mistty-interactive-insert-hook,  Prev: mistty-mode-hook,  Up: Hooks

2.3.1.2 mistty-interactive-insert-hook
......................................

‘mistty-interactive-insert-hook’ is a hook that is called when text is
typed in the terminal region.  It’s not called, for example, for text
that is inserted or displayed by the shell.

This hook provides an appropriate time to trigger auto-completion UI,
which, by default, doesn’t work in the terminal region, as discussed in
*note Auto-complete: 17.

Auto-completion doesn’t work in the terminal region because it often
requires calling a post-command function.  To work around that, in most
case, it’s enough to just turn on the option ‘M-x customize-option
mistty-simulate-self-insert-command’, which enables the function
‘mistty-self-insert-command’, called by this hook by default.

This might not always work and have unintended effects, so you might
prefer to trigger the auto-completion UI yourself by adding your own
function to this hook and turning the above option off.


File: mistty.info,  Node: OSC Sequences,  Next: Writing Your Own Commands,  Prev: Hooks,  Up: Extending MisTTY

2.3.2 OSC Sequences
-------------------

OSC are “operating system command” control sequences.  MisTTY supports
some of these sequences and ignores the others.

By default, the supported sequences are OSC 2 (set window title), 7
(directory tracking, already mentioned in *note Directory tracking and
TRAMP: 15.) and 8 (hyperlinks), thanks to ‘ansi-osc.el’.

To add more, register handlers to ‘mistty-osc-handlers’.  The format is
the same as the handlers supported for ‘ansi-osc-handlers’ and can
usually be used interchangeably.

When working on OSC handlers for MisTTY, it’s important to keep the
following in mind: MisTTY separate buffers for the terminal (a
‘term-mode’ buffer) and for MisTTY itself.  The OSC handlers run in the
term-mode buffer.

One consequence of this is that if you set a buffer-local variable in a
handler, it won’t be available in the MisTTY buffer unless you register
it to ‘M-x configure-option mistty-variables-to-copy’

MisTTY provides helpers for writing OSC handlers that set text
properties:

   - The function ‘mistty-register-text-properties’ registers a set of
     text properties to set on any text written to the terminal until
     ‘mistty-unregister-text-properties’ is called with the same
     argument.


File: mistty.info,  Node: Writing Your Own Commands,  Next: Terminal Keymap,  Prev: OSC Sequences,  Up: Extending MisTTY

2.3.3 Writing Your Own Commands
-------------------------------

You might find the following functions useful if you’d like to write
commands that extend MisTTY’s behavior:

   - ‘mistty-send-string’ sends a string to the terminal, unmodified.
     The string that is sent appear only after the function return - and
     it might not ever appear at all depending on the application
     attached to the terminal.  This is used to implement ‘mistty-sudo’
     for example.

   - ‘mistty-on-prompt-p’ returns non-nil if the given position is
     inside of a prompt MisTTY is aware of.  This is useful for writing
     commands that behave differently on a prompt than on program
     output, even while inside of the terminal zone.  It is used to
     implement ‘mistty-beginning-of-line’ for example.

   - ‘mistty-maybe-realize-possible-prompt’ might be useful to call in
     your commands to tell MisTTY that there’s likely a prompt at the
     current pointer position.

   - ‘mistty-before-position’ not only check whether there’s a prompt at
     the position, but also attempt to move the terminal cursor to that
     position.


File: mistty.info,  Node: Terminal Keymap,  Next: Auto-complete,  Prev: Writing Your Own Commands,  Up: Extending MisTTY

2.3.4 Terminal Keymap
---------------------

To forward a key binding to the application attached to the terminal
‘mistty-send-key’ first needs to convert that key binding to something
applications will understand.  The translation is done by
‘mistty-translate-key’.

     The function ‘mistty-translate-key’ takes an Emacs key binding, as
     returned by ‘kbd’ and returns a string containing the sequence of
     characters that correspond to that key to send to the application
     tied to the terminal.

The default terminal keymap used by MisTTY mimics ‘xterm’ key bindings.
You might extend it or change it by changing the map
‘mistty-term-key-map’.

For example, you can change the string that correspond to the first
function keys from their default (”\eOP” - “\eOS”) as follows:

     (define-key mistty-term-key-map (kbd "<f1>") "\e[11~")
     (define-key mistty-term-key-map (kbd "<f2>") "\e[12~")
     (define-key mistty-term-key-map (kbd "<f3>") "\e[13~")
     (define-key mistty-term-key-map (kbd "<f4>") "\e[14~")

‘M-x mistty-reverse-input-decode-map’ generates alternative values for
‘mistty-term-key-map’ for you if you’d like mimic another set of key
bindings than xterm, for example, to generate a keymap that simulates
rxvt, you might do:

     (load-library "term/rxvt.el")
     (mistty-reverse-input-decode-map rxvt-function-map)

‘mistty-reverse-input-decode-map.el’ is not included into the
distribution; it’s only available on github(1).

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/mistty/tree/master/extras


File: mistty.info,  Node: Auto-complete,  Next: Long-running commands,  Prev: Terminal Keymap,  Up: Extending MisTTY

2.3.5 Auto-complete
-------------------

Auto-complete is a completion UI that shows up automatically after some
delay, without having to call ‘completion-at-point’.  This used not to
work in MisTTY terminal region.  The hook
‘mistty-simulates-self-insert-command’ was introduced to fix that.  See
‘mistty-interactive-insert-hook’ in *note Hooks: 32.

By default this hook calls the buffer ‘pre-command-hook’ and
‘post-command-hook’ with ‘this-command’ set to ‘self-insert-command’, as
this is the way auto-complete is normally triggered.  This can be turned
off if necessary using the option on ‘M-x customize-option
mistty-simulate-self-insert-command’.

If the behavior described above doesn’t work for some packages, it
should be possible to build a custom bridge between this hook and the
auto-completion package.


File: mistty.info,  Node: Long-running commands,  Prev: Auto-complete,  Up: Extending MisTTY

2.3.6 Long-running commands
---------------------------

In Emacs, most editing tools are run as a single Emacs command, but some
tools span multiple Emacs command, for example, when you expand a
snippet with yasnippet(1), the snippet template is inserted into the
buffer, together with placeholders for you to fill some missing
information.

Filling in a template is a series of Emacs commands, that, together,
have a single effect: to insert a snippet of text.  MisTTY calls this a
long-running command.

When run in the terminal region, such long-running commands fail as
MisTTY sends the initial text to the shell, which echoes it back to be
redisplayed, possibly jumbling things and definitely destroying any
overlays.

To avoid such situations, MisTTY holds back sending text to the shell
until long-running commands are done.  For that to work, MisTTY needs to
know when such command start and end.

You can tell whether MisTTY thinks a long-running command is active, as
it displays ‘CMD’ in the modeline.  You can also do it programmatically:

     The function ‘mistty-long-running-command-p’ returns non-nil if
     MisTTY thinks a long-running command is active.

MisTTY detects some long-running commands by looking for overlays they
typically add to the buffer.  This can be extended with ‘M-x
customize-option mistty-foreign-overlay-properties’ or turned off with
‘M-x customize-option mistty-detect-foreign-overlays’.

To add a new property to ‘mistty-foreign-overlay-properties’, start the
interactive command, look for overlays with ‘overlays-in’ then get their
properties with ‘overlay-properties’.  You can then choose, on that
list, a property or face that identifies the feature or package.

If you find yourself extending ‘mistty-foreign-overlay-properties’,
please add an issue to ‘https://github.com/szermatt/mistty/issues/new’
so it can be integrated into the next version.

Alternatively, as not all long-running commands that can be confused by
MisTTY use overlays, you might need to tell MisTTY about them.  MisTTY
does it already for ‘completion-in-region’.

     The function ‘mistty-report-long-running-command’ can be called to
     tell MisTTY when a long-running command start and end.  It’s
     typically called from hooks provided by the package of the
     long-running command.

Here’s an example of code that would detect ‘completion-in-region-mode’
if MisTTY didn’t already do it:

     (defun my-completion-in-region ()
       (mistty-report-long-running-command
         'my-completion-in-region completion-in-region-mode))
     (defun my-detect-completion-in-region ()
        (add-hook 'completion-in-region-mode-hook
                  #'my-completion-in-region nil t))
     (add-hook 'mistty-mode-hook #'my-detect-completion-in-region)

   ---------- Footnotes ----------

   (1) https://github.com/joaotavora/yasnippet


File: mistty.info,  Node: FAQ,  Next: Contributing,  Prev: Extending MisTTY,  Up: Contents

2.4 FAQ
=======

‘What are all those OCOCOCO or ODODODO that appear on the screen?’

     These are the terminal sequences that MisTTY sends to a program to
     move the cursor left or right.  If you see these printed on the
     terminal, it means that the program that’s currently controlling
     the terminal doesn’t support these.

     In such situation, you can:

        - Only type self-inserting characters and ‘DEL’.

        - Press ‘C-c C-q’ or ‘M-x mistty-send-key-sequence’ to send what
          you type directly to the terminal until you turn it off with
          ‘C-g’.

        - Write a regexp that identifies the situation and add it to
          ‘M-x customize-option mistty-forbid-edit-regexps’ so MisTTY
          knows it should not attempt to move the cursor.  The default
          value identifies most shell backward search prompts.

     See the section *note Terminal vs.  Scrollback: c. for more
     details.

‘The shell isn’t answering!’

     Press ‘C-g’.  If this is just a one-time thing, this will do the
     trick.

     If this keeps happening, check the modeline.  Does it contain CMD?
     It might look like this: ‘misTTY CMD:run’.  In that case, MisTTY is
     stuck in long-running command mode.  This is likely due to some
     package leaving overlays to the buffer that confuse MisTTY. To fix
     that, turn off the option ‘M-x customize-option
     mistty-detect-foreign-overlays’ or, if you know which package is
     causing trouble, remove the corresponding property in in ‘M-x
     customize-option mistty-foreign-overlay-properties’.

     For details, see *note Long-running commands: 1a.

     If this keeps happening and the modeline does not contain CMD, this
     is likely a bug.  Please see *note Reporting issues: 3. for details
     on filing a bug report.

‘Why is the cursor jumping around when I move it?’

     MisTTY jumps over spaces which just “aren’t there”, such as the
     spaces between the command and the right prompt, spaces added by
     ‘fish’ for indentation in multi-line prompts.

     If it doesn’t work with your shell or setup, or if you find it
     confusing, type ‘M-x customize-option mistty-skip-empty-spaces’ to
     turn it off.

‘What’s with the purple line?’

     This line indicates the region of the buffer that works as a
     terminal, meaning that it is not fully editable and that some
     shortcuts, such as ‘TAB’ are sent directly to the program
     controlling the terminal.

     This is covered in depth in the section *note Terminal vs.
     Scrollback: c.

     If you just don’t want to see that line, turn it off with ‘M-x
     customize-option mistty-fring-enabled’

‘Why doesn’t <insert package here> work in the terminal region?’

     The terminal region of MisTTY behaves very differently from a
     normal buffer; many things can go wrong with commands that do more
     than just editing text.

     One such issue is with interactivly editing the buffer over
     multiple Emacs command, which MisTTY calls a long-running command.
     There are ways of making such commands work if they don’t already,
     described in *note Long-running commands: 1a.

     Another such issue is with autocomplete, with can also be made to
     work as described in *note Auto-complete: 17.

     While this works with some packages, it might not necessarily work
     with the package you want - it might even not be possible to make
     it work, but we can always try.  Please file a bug(1) if you
     encounter such a package you’d like to work with MisTTY.

‘… but it used to work!’

     Older versions used to detect any unknown overlay as a long-running
     command, described in *note Long-running commands: 1a.
     Unfortunately, this caused problems with many packages which,
     leaving overlays around for a long time, prevented MisTTY from
     working at all.

     The good news is that it’s likely easy to make it work again by
     detecting the specific kind of overlays the package is using.
     Please see *note Long-running commands: 1a. or file a bug(2)
     mentioning the package you’re using, its version and how you
     installed it.

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/mistty/issues

   (2) https://github.com/szermatt/mistty/issues


File: mistty.info,  Node: Contributing,  Prev: FAQ,  Up: Contents

2.5 Contributing
================

* Menu:

* Reporting issues::
* Suggesting features::
* Asking questions::
* Code contributions::
* Documentation contributions::


File: mistty.info,  Node: Reporting issues,  Next: Suggesting features,  Up: Contributing

2.5.1 Reporting issues
----------------------

At this time, the most useful thing you can do to help is and useful bug
reports to the Issue Tracker(1)

In your report, please discuss what you wanted to happen as well as what
happened.  Also, please include enough information to reproduce the
issue.  Such as:

   - the name and version of the program you were running - usually a
     shell

   - the version of Emacs you’re running, taken, for example, from ‘M-x
     about-emacs’

   - whether you’re running Emacs in a window environment or a terminal

   - what kind of prompt you’re using, that is, what it looks like, what
     character it ends with, how many lines it has and whether you’re
     using any kind of right prompt

If you can reproduce reliably, please include the content of the buffer
‘*mistty-log*’ into your report, as follows:

   - Enable logging by calling ‘M-x mistty-start-log’

   - Reproduce the issue

   - Go to the buffer ‘*mistty-log*’

   - Call ‘M-x mistty-stop-log’ to avoid getting more log entries

   - Copy the buffer content and paste it into the issue.  The log
     includes everything that you write to the terminal and everything
     that you get back from the terminal.  Please make sure you’re not
     including any private information, such as password - remove them
     if necessary…

If you cannot reproduce reliably,

   - go to ‘M-x customize-option mistty-backlog-size’ to set the backlog
     size to a large value, such as 50

   - use MisTTY normally, until the issue comes back

   - once it has happened again, immediately call ‘M-x
     mistty-start-log’.  The log will then contain entries for events
     that happened just ‘before’ you called the command.

   - call ‘M-x mistty-stop-log’

   - copy the content of the ‘*mistty-log*’ buffer, strip out anything
     private, and include it into the issue.

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/mistty/issues


File: mistty.info,  Node: Suggesting features,  Next: Asking questions,  Prev: Reporting issues,  Up: Contributing

2.5.2 Suggesting features
-------------------------

Please add feature suggestions to the Issue Tracker(1).

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/mistty/issues


File: mistty.info,  Node: Asking questions,  Next: Code contributions,  Prev: Suggesting features,  Up: Contributing

2.5.3 Asking questions
----------------------

Open an issue on the Issue Tracker(1) with your question.

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/mistty/issues


File: mistty.info,  Node: Code contributions,  Next: Documentation contributions,  Prev: Asking questions,  Up: Contributing

2.5.4 Code contributions
------------------------

To contribute code to the project, open a Pull Request(1).

Before you do that, please make sure the any new features is covered by
tests and that the tests pass.

To run the tests, install and setup eldev(2) then run ‘eldev test’.

Tests can also be run from inside of Emacs, using ‘M-x
ert-run-tests-interactively’ but when you do so, be aware that there
might be unexpected interaction with your Emacs configurations.  The
tests passing reliably when run using ‘eldev test’ is what matters.

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/emacs-bash-completion/pulls

   (2) https://github.com/emacs-eldev/eldev


File: mistty.info,  Node: Documentation contributions,  Prev: Code contributions,  Up: Contributing

2.5.5 Documentation contributions
---------------------------------

You don’t need to be a developer to contribute!  Contribution to the
documentation or code comments are very welcome.  Please open a Pull
Request(1) with your proposed modifications.

The documentation is written in reStructuredText.  You’ll need to
install Sphinx(2) to build it:

     pip install sphinx sphinx-rtd-theme

Then run ‘eldev html’ to build the documentation.

   ---------- Footnotes ----------

   (1) https://github.com/szermatt/emacs-bash-completion/pulls

   (2) https://www.sphinx-doc.org


File: mistty.info,  Node: Index,  Prev: Contents,  Up: Top

Index
*****

 [index ]
* Menu:

* command; mistty:                       Launching.           (line  24)
* command; mistty-create:                Launching.           (line  10)
* command; mistty-create-buffer-with-output: Navigating the scrollback zone.
                                                              (line  26)
* command; mistty-create-other-window:   Launching.           (line  21)
* command; mistty-end-of-line-goto-cursor: Navigating the scrollback zone.
                                                              (line   6)
* command; mistty-goto-cursor:           Navigating the scrollback zone.
                                                              (line  10)
* command; mistty-goto-next-input:       Navigating the scrollback zone.
                                                              (line  37)
* command; mistty-goto-previous-input:   Navigating the scrollback zone.
                                                              (line  31)
* command; mistty-in-project:            Launching.           (line  35)
* command; mistty-next-output:           Navigating the scrollback zone.
                                                              (line  19)
* command; mistty-other-window:          Launching.           (line  32)
* command; mistty-previous-output:       Navigating the scrollback zone.
                                                              (line  14)
* command; mistty-register-text-properties: OSC Sequences.    (line  29)
* command; mistty-select-output:         Navigating the scrollback zone.
                                                              (line  22)
* command; mistty-send-key:              Terminal vs Scrollback.
                                                              (line  81)
* command; mistty-send-key-sequence:     Terminal vs Scrollback.
                                                              (line 117)
* command; mistty-send-last-key:         Terminal vs Scrollback.
                                                              (line 105)
* command; mistty-start-log:             Reporting issues.    (line  25)
* command; mistty-stop-log:              Reporting issues.    (line  25)
* command; mistty-toggle-buffers:        Fullscreen Mode.     (line  15)
* command; mistty-unregister-text-properties: OSC Sequences.  (line  29)
* environment variable; ESHELL:          Launching.           (line  15)
* environment variable; SHELL:           Launching.           (line  16)
* ESHELL:                                Launching.           (line  15)
* function; mistty-before-position:      Writing Your Own Commands.
                                                              (line  25)
* function; mistty-long-running-command-p: Long-running commands.
                                                              (line  28)
* function; mistty-maybe-realize-possible-prompt: Writing Your Own Commands.
                                                              (line  21)
* function; mistty-on-prompt-p:          Writing Your Own Commands.
                                                              (line  15)
* function; mistty-project-init-kill-buffer: Launching.       (line  35)
* function; mistty-report-long-running-command: Long-running commands.
                                                              (line  49)
* function; mistty-reverse-input-decode-map: Terminal Keymap. (line  28)
* function; mistty-send-string:          Writing Your Own Commands.
                                                              (line   9)
* function; mistty-translate-key:        Terminal Keymap.     (line   6)
* hook; mistty-interactive-interactive:  mistty-mode-hook.    (line  24)
* hook; mistty-mode-hook:                mistty-mode-hook.    (line   6)
* map; mistty-mode-map:                  Terminal vs Scrollback.
                                                              (line  74)
* map; mistty-prompt-map:                Terminal vs Scrollback.
                                                              (line  74)
* map; mistty-term-key-map:              Terminal Keymap.     (line   6)
* option; mistty-detect-foreign-overlays: Long-running commands.
                                                              (line  31)
* option; mistty-foreign-overlay-properties: Long-running commands.
                                                              (line  31)
* SHELL:                                 Launching.           (line  16)
* variable; explicit-shell-file-name:    Launching.           (line  10)
* variable; mistty-allow-tramp-path:     Directory tracking and TRAMP.
                                                              (line  15)
* variable; mistty-detect-foreign-overlays: Long-running commands.
                                                              (line  31)
* variable; mistty-forbid-edit-regexps:  FAQ.                 (line   8)
* variable; mistty-foreign-overlay-properties: Long-running commands.
                                                              (line  31)
* variable; mistty-interactive-insert-hook: mistty-mode-hook. (line  25)
* variable; mistty-mode-hook:            mistty-mode-hook.    (line   6)
* variable; mistty-osc-handlers:         OSC Sequences.       (line  13)
* variable; mistty-simulate-self-insert-command: Auto-complete.
                                                              (line   6)
* variable; mistty-skip-empty-spaces:    Multi-line prompts<2>.
                                                              (line   9)
* variable; mistty-variables-to-copy:    OSC Sequences.       (line  22)
* variable; mistty-wrap-capf-functions:  Autosuggestions.     (line   6)
* variable; shell-file-name:             Launching.           (line  10)



Tag Table:
Node: Top358
Ref: index doc545
Ref: 0545
Node: Comparison with other packages1885
Ref: index comparison-with-other-packages1984
Ref: 41984
Ref: index mistty1984
Ref: 51984
Node: Contents3679
Ref: index contents3780
Ref: 63780
Node: Usage3880
Ref: usage doc3945
Ref: 73945
Ref: usage usage3945
Ref: 83945
Node: Installation4231
Ref: usage id14303
Ref: 94303
Ref: usage installation4303
Ref: a4303
Ref: Installation-Footnote-15329
Node: Launching5373
Ref: usage id25476
Ref: b5476
Ref: usage launching5476
Ref: 15476
Node: Terminal vs Scrollback7463
Ref: usage term-vs-scroll7584
Ref: c7584
Ref: usage terminal-vs-scrollback7584
Ref: d7584
Node: Navigating the scrollback zone12544
Ref: usage navigating-the-scrollback-zone12671
Ref: f12671
Ref: usage navigation12671
Ref: 1012671
Node: Fullscreen Mode14332
Ref: usage fullscreen14452
Ref: 214452
Ref: usage fullscreen-mode14452
Ref: 1214452
Node: Command History15048
Ref: usage command-history15166
Ref: 1315166
Ref: usage history15166
Ref: 1115166
Node: Directory tracking and TRAMP16070
Ref: usage directory-tracking-and-tramp16192
Ref: 1416192
Ref: usage dirtrack16192
Ref: 1516192
Node: Completion-at-point16853
Ref: usage completion-at-point16978
Ref: 1616978
Ref: Completion-at-point-Footnote-118022
Ref: Completion-at-point-Footnote-218061
Node: Autosuggestions18099
Ref: usage autosuggestions18170
Ref: 1818170
Node: Template Expansion19186
Ref: usage template-expansion19296
Ref: 1919296
Ref: Template Expansion-Footnote-119887
Ref: Template Expansion-Footnote-219927
Node: Fancy prompts19975
Ref: usage fancy-prompts20057
Ref: 1b20057
Ref: Fancy prompts-Footnote-120497
Node: Shells20540
Ref: shells doc20630
Ref: 1c20630
Ref: shells id120630
Ref: 1d20630
Ref: shells shells20630
Ref: e20630
Node: Bash20689
Ref: shells bash20749
Ref: 1e20749
Ref: shells id220749
Ref: 1f20749
Node: Multi-line prompts21243
Ref: shells multi-line-prompts21329
Ref: 2021329
Node: Directory tracking22051
Ref: shells directory-tracking22153
Ref: 2122153
Node: VI mode22870
Ref: shells vi-mode22945
Ref: 2222945
Node: Fish23512
Ref: shells fish23584
Ref: 2323584
Ref: shells id323584
Ref: 2423584
Node: Autosuggestions<2>23936
Ref: shells autosuggestions24022
Ref: 2524022
Node: Command History<2>24400
Ref: shells command-history24516
Ref: 2624516
Node: Directory tracking<2>25432
Ref: shells id425551
Ref: 2725551
Node: Multi-line prompts<2>26079
Ref: shells id526190
Ref: 2826190
Node: VI mode<2>26597
Ref: shells id626678
Ref: 2926678
Node: Zsh27119
Ref: shells id727178
Ref: 2a27178
Ref: shells zsh27178
Ref: 2b27178
Node: Autosuggestions<3>27608
Ref: shells id827696
Ref: 2c27696
Node: Directory tracking<3>28122
Ref: shells id928240
Ref: 2d28240
Node: Multi-line prompts<3>28642
Ref: shells id1028752
Ref: 2e28752
Node: VI mode<3>29471
Ref: shells id1129551
Ref: 2f29551
Node: Extending MisTTY29986
Ref: extensions doc30074
Ref: 3030074
Ref: extensions extending-mistty30074
Ref: 3130074
Node: Hooks30249
Ref: extensions hooks30329
Ref: 3230329
Ref: extensions id130329
Ref: 3330329
Node: mistty-mode-hook30420
Ref: extensions mistty-mode-hook30517
Ref: 3430517
Node: mistty-interactive-insert-hook31301
Ref: extensions mistty-interactive-insert-hook31398
Ref: 3531398
Node: OSC Sequences32382
Ref: extensions osc32496
Ref: 3632496
Ref: extensions osc-sequences32496
Ref: 3732496
Node: Writing Your Own Commands33782
Ref: extensions custom-commands33906
Ref: 3833906
Ref: extensions writing-your-own-commands33906
Ref: 3933906
Node: Terminal Keymap35076
Ref: extensions term-keymap35200
Ref: 3a35200
Ref: extensions terminal-keymap35200
Ref: 3b35200
Ref: Terminal Keymap-Footnote-136751
Node: Auto-complete36813
Ref: extensions auto-complete36933
Ref: 3c36933
Ref: extensions autocomplete36933
Ref: 1736933
Node: Long-running commands37787
Ref: extensions long-running-commands37883
Ref: 3d37883
Ref: extensions lrc37883
Ref: 1a37883
Ref: Long-running commands-Footnote-140757
Node: FAQ40805
Ref: faq doc40899
Ref: 3e40899
Ref: faq faq40899
Ref: 3f40899
Ref: FAQ-Footnote-145222
Ref: FAQ-Footnote-245272
Node: Contributing45322
Ref: contrib doc45391
Ref: 4045391
Ref: contrib contributing45391
Ref: 4145391
Node: Reporting issues45557
Ref: contrib reporting45650
Ref: 345650
Ref: contrib reporting-issues45650
Ref: 4245650
Ref: Reporting issues-Footnote-147615
Node: Suggesting features47665
Ref: contrib issue-tracker47783
Ref: 4347783
Ref: contrib suggesting-features47783
Ref: 4447783
Ref: Suggesting features-Footnote-147929
Node: Asking questions47979
Ref: contrib asking-questions48099
Ref: 4548099
Ref: Asking questions-Footnote-148241
Node: Code contributions48291
Ref: contrib code-contributions48419
Ref: 4648419
Ref: Code contributions-Footnote-149013
Ref: Code contributions-Footnote-249077
Node: Documentation contributions49122
Ref: contrib documentation-contributions49225
Ref: 4749225
Ref: contrib eldev49225
Ref: 4849225
Ref: Documentation contributions-Footnote-149713
Ref: Documentation contributions-Footnote-249777
Node: Index49812

End Tag Table


Local Variables:
coding: utf-8
End:
