;;; boxquote-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from boxquote.el

(autoload 'boxquote-title "boxquote" "\
Set the title of the current boxquote to TITLE.

If TITLE is an empty string the title is removed. Note that
the title will be formatted using `boxquote-title-format'.

(fn TITLE)" t)
(autoload 'boxquote-region "boxquote" "\
Draw a box around the left hand side of a region bounding START and END.

(fn START END)" t)
(autoload 'boxquote-buffer "boxquote" "\
Apply `boxquote-region' to a whole buffer." t)
(autoload 'boxquote-insert-file "boxquote" "\
Insert the contents of a file, boxed with `boxquote-region'.

If `boxquote-title-files' is non-nil the boxquote will be given a
title that is the result of applying `boxquote-file-title-function'
to FILENAME.

(fn FILENAME)" t)
(autoload 'boxquote-insert-buffer "boxquote" "\
Insert the contents of a buffer, boxes with `boxquote-region'.

If `boxquote-title-buffers' is non-nil the boxquote will be given a
title that is the result of applying `boxquote-buffer-title-function'
to BUFFER.

(fn BUFFER)" t)
(autoload 'boxquote-kill-ring-save "boxquote" "\
Like `kill-ring-save' but remembers a title if possible.

The title is acquired by calling `boxquote-kill-ring-save-title'.
The title will be used by `boxquote-yank'." t)
(autoload 'boxquote-yank "boxquote" "\
Do a `yank' and box it in with `boxquote-region'.

If the yanked entry was placed on the kill ring with
`boxquote-kill-ring-save' the resulting boxquote will be titled with
whatever `boxquote-kill-ring-save-title' returned at the time." t)
(autoload 'boxquote-defun "boxquote" "\
Apply `boxquote-region' the current defun." t)
(autoload 'boxquote-paragraph "boxquote" "\
Apply `boxquote-region' to the current paragraph." t)
(autoload 'boxquote-boxquote "boxquote" "\
Apply `boxquote-region' to the current boxquote." t)
(autoload 'boxquote-describe-function "boxquote" "\
Call `describe-function' and boxquote the output into the current buffer.

FUNCTION is the function to describe.

(fn FUNCTION)" t)
(autoload 'boxquote-describe-variable "boxquote" "\
Call `describe-variable' and boxquote the output into the current buffer.

VARIABLE is the variable to describe.

(fn VARIABLE)" t)
(autoload 'boxquote-describe-key "boxquote" "\
Call `describe-key' on KEY and boxquote the output into the current buffer.

If the call to this command is prefixed with \\[universal-argument] you will also be
prompted for a buffer. The key definition used will be taken from
that buffer.

(fn KEY)" t)
(autoload 'boxquote-shell-command "boxquote" "\
Call `shell-command' with COMMAND and boxquote the output.

(fn COMMAND)" t)
(autoload 'boxquote-where-is "boxquote" "\
Call `where-is' with DEFINITION and boxquote the result.

(fn DEFINITION)" t)
(autoload 'boxquote-text "boxquote" "\
Insert TEXT, boxquoted.

(fn TEXT)" t)
(autoload 'boxquote-narrow-to-boxquote "boxquote" "\
Narrow the buffer to the current boxquote." t)
(autoload 'boxquote-narrow-to-boxquote-content "boxquote" "\
Narrow the buffer to the content of the current boxquote." t)
(autoload 'boxquote-kill "boxquote" "\
Kill the boxquote and its contents." t)
(autoload 'boxquote-fill-paragraph "boxquote" "\
Perform a `fill-paragraph' inside a boxquote.

(fn ARG)" t)
(autoload 'boxquote-unbox-region "boxquote" "\
Remove a box created with `boxquote-region'.

(fn START END)" t)
(autoload 'boxquote-unbox "boxquote" "\
Remove the boxquote that contains `point'." t)
(register-definition-prefixes "boxquote" '("boxquote-"))

;;; End of scraped data

(provide 'boxquote-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; boxquote-autoloads.el ends here
