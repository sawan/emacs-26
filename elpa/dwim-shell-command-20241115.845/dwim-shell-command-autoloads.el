;;; dwim-shell-command-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from dwim-shell-command.el

(autoload 'dwim-shell-command "dwim-shell-command" "\
Execute DWIM shell command asynchronously using noweb templates.

Which files

  `dwim-shell-command' attempts to guess which file(s) you may want
  the command to operate on.

  1. If visiting a `dired' buffer, draw the marked file(s).
  2. If visiting any other buffer with an associated file, use that.

Templates

  Operate on drawn files using either the following:

    <<f>> (file path)
    <<fne>> (file path without extension)
    <<e>> (extension)
    <<td>> (generate a temporary directory)
    <<*>> (all files joined)
    <<cb>> (clipboard)
    <<n>>, <<1n>>, or <<An>> (for current iteration)

  For example:

    With drawn files '(\"path/to/image1.png\" \"path/to/image2.png\")

   \"convert '<<f>>' '<<fne>>.jpg'\" expands to

     \"convert 'path/to/image1.png' 'path/to/image1.jpg'\"
     \"convert 'path/to/image2.png' 'path/to/image2.jpg'\"

   while \"ls -lh <<*>>\" expands to

     \"ls -lh path/to/image1.png path/to/image2.png\"

Focus

  `dwim-shell-command' creates a process buffer to capture command
  output, but doesn't display or focus on it by default.  Instead,
  it tries to guess what's more convenient to focus on.

  While the process is busy, show a spinner in the minibuffer.  No
  focus changes.

  After process is finished:

  1. If there were any files created in the `default-directory',
  jump to a `dired' buffer and move point to the new file (via
  `dired-jump').

  2. If no new files were created, automatically switch focus to the
  process buffer and display its output.

    Note: You can prevent this automatic focus by prepending your
    command with whitespace.

      |
      V
    \" convert '<<f>>' '<<fne>>.jpg'\"

  3. If the shell command caused any errors, offer to focus the
  process buffer and display its output.

Quick exit

  Process buffers are read-only and can be quickly closed by
  pressing `q'.

Prefix

  With PREFIX, execute command that number of times.

(fn PREFIX)" t)
(register-definition-prefixes "dwim-shell-command" '("dwim-shell-command-"))


;;; Generated autoloads from dwim-shell-commands.el

(autoload 'dwim-shell-commands-audio-to-mp3 "dwim-shell-commands" "\
Convert all marked audio to mp3(s)." t)
(autoload 'dwim-shell-extract-har-content "dwim-shell-commands" "\
Extract all har content fields to files.

(fn PREFIX)" t)
(autoload 'dwim-shell-extract-har-urls "dwim-shell-commands" "\
Get all request URLs." t)
(autoload 'dwim-shell-view-open-ports-per-app "dwim-shell-commands" "\
View open ports per app" t)
(autoload 'dwim-shell-commands-open-clipboard-url "dwim-shell-commands" "\
Open clipboard URL.  Offer to stream if possible." t)
(autoload 'dwim-shell-commands-stream-clipboard-url "dwim-shell-commands" "\
Stream clipboard URL using mpv." t)
(autoload 'dwim-shell-commands-download-clipboard-stream-url "dwim-shell-commands" "\
Download clipboard URL." t)
(autoload 'dwim-shell-commands-image-clear-exif-metadata "dwim-shell-commands" "\
Clear EXIF metadata in image(s)." t)
(autoload 'dwim-shell-commands-image-scan-code "dwim-shell-commands" "\
Scan any code (ie. qr, bar, etc) from image(s)." t)
(autoload 'dwim-shell-commands-image-exif-metadata "dwim-shell-commands" "\
View EXIF metadata in image(s)." t)
(autoload 'dwim-shell-commands-tesseract-ocr-text-from-image "dwim-shell-commands" "\
Extract text from image via tesseract." t)
(autoload 'dwim-shell-commands-image-view-location-in-openstreetmap "dwim-shell-commands" "\
Open image(s) location in map/browser." t)
(autoload 'dwim-shell-commands-image-reverse-geocode-location "dwim-shell-commands" "\
Reverse geocode image(s) location." t)
(autoload 'dwim-shell-commands-image-horizontal-flip "dwim-shell-commands" "\
Horizontally flip image(s)." t)
(autoload 'dwim-shell-commands-image-vertical-flip "dwim-shell-commands" "\
Horizontally flip image(s)." t)
(autoload 'dwim-shell-commands-image-to-jpg "dwim-shell-commands" "\
Convert all marked images to jpg(s)." t)
(autoload 'dwim-shell-commands-image-to-png "dwim-shell-commands" "\
Convert all marked images to png(s)." t)
(autoload 'dwim-shell-commands-svg-to-png "dwim-shell-commands" "\
Convert all marked svg(s) to png(s)." t)
(autoload 'dwim-shell-commands-svg-to-favicons "dwim-shell-commands" "\
Convert svg to common favicons." t)
(autoload 'dwim-shell-commands-make-transparent-png "dwim-shell-commands" "\
Create a transparent png." t)
(autoload 'dwim-shell-commands-join-as-pdf "dwim-shell-commands" "\
Join all marked images as a single pdf." t)
(autoload 'dwim-shell-commands-keep-pdf-page "dwim-shell-commands" "\
Keep a page from pdf." t)
(autoload 'dwim-shell-commands-join-images-horizontally "dwim-shell-commands" "\
Join all marked images horizontally as a single image." t)
(autoload 'dwim-shell-commands-join-images-vertically "dwim-shell-commands" "\
Join all marked images vertically as a single image." t)
(autoload 'dwim-shell-commands-image-to-grayscale "dwim-shell-commands" "\
Convert all marked images to grayscale." t)
(autoload 'dwim-shell-commands-reorient-image "dwim-shell-commands" "\
Reorient images." t)
(autoload 'dwim-shell-commands-gif-to-video "dwim-shell-commands" "\
Convert all marked gif(s) to video(s)." t)
(autoload 'dwim-shell-commands-macos-empty-trash "dwim-shell-commands" "\
Empty macOS trash." t)
(autoload 'dwim-shell-commands-macos-ocr-text-from-desktop-region "dwim-shell-commands" "\
Select a macOS desktop area to OCR and copy recognized text to kill ring." t)
(autoload 'dwim-shell-commands-macos-ocr-text-from-image "dwim-shell-commands" "\
OCR file and copy recognized text to kill ring." t)
(autoload 'dwim-shell-commands-macos-convert-to-mp4 "dwim-shell-commands" "\
Convert to mov to mp4" t)
(autoload 'dwim-shell-commands-video-to-gif "dwim-shell-commands" "\
Convert all marked videos to gif(s)." t)
(autoload 'dwim-shell-commands-video-to-mov "dwim-shell-commands" "\
Convert all marked videos to mov(s)." t)
(autoload 'dwim-shell-commands-video-to-webp "dwim-shell-commands" "\
Convert all marked videos to webp(s)." t)
(autoload 'dwim-shell-commands-webp-to-video "dwim-shell-commands" "\
Convert all marked webp(s) to video(s)." t)
(autoload 'dwim-shell-commands-webp-to-gif "dwim-shell-commands" "\
Convert all marked webp(s) to gif(s)." t)
(autoload 'dwim-shell-commands-video-to-hevc-mkv "dwim-shell-commands" "\
Convert all marked videos to hevc mkv." t)
(autoload 'dwim-shell-commands-video-to-optimized-gif "dwim-shell-commands" "\
Convert all marked videos to optimized gif(s)." t)
(autoload 'dwim-shell-commands-unzip "dwim-shell-commands" "\
Unzip all marked archives (of any kind) using `atool'." t)
(autoload 'dwim-shell-commands-zip "dwim-shell-commands" "\
Zip all marked files into archive.zip." t)
(autoload 'dwim-shell-commands-zip-password-protect "dwim-shell-commands" "\
Protect/encrypt zip file(s) with password." t)
(autoload 'dwim-shell-commands-optimize-gif "dwim-shell-commands" "\
Convert all marked videos to optimized gif(s)." t)
(autoload 'dwim-shell-commands-speed-up-gif "dwim-shell-commands" "\
Speeds up gif(s)." t)
(autoload 'dwim-shell-commands-image-apply-ios-round-corners "dwim-shell-commands" "\
Apply iOS round corners to image(s)." t)
(autoload 'dwim-shell-commands-clip-round-rect-gif "dwim-shell-commands" "\
Clip gif(s) with round rectangle." t)
(autoload 'dwim-shell-commands-resize-gif "dwim-shell-commands" "\
Resize marked gif(s)." t)
(autoload 'dwim-shell-commands-epub-to-org "dwim-shell-commands" "\
Convert epub(s) to org." t)
(autoload 'dwim-shell-commands-docx-to-pdf "dwim-shell-commands" "\
Convert docx(s) to pdf (via latex)." t)
(autoload 'dwim-shell-commands-kill-process "dwim-shell-commands" "\
Select and kill process." t)
(autoload 'dwim-shell-commands-macos-add-to-photos "dwim-shell-commands" "\
Add to Photos.app." t)
(autoload 'dwim-shell-commands-macos-toggle-bluetooth-device-connection "dwim-shell-commands" "\
Toggle Bluetooth device connection." t)
(autoload 'dwim-shell-commands-macos-bin-plist-to-xml "dwim-shell-commands" "\
Convert binary plist to xml." t)
(autoload 'dwim-shell-commands-macos-toggle-dark-mode "dwim-shell-commands" "\
Toggle macOS dark mode." t)
(autoload 'dwim-shell-commands-pdf-to-txt "dwim-shell-commands" "\
Convert pdf to txt." t)
(autoload 'dwim-shell-commands-resize-image-by-factor "dwim-shell-commands" "\
Resize marked image(s) by factor." t)
(autoload 'dwim-shell-commands-resize-image-in-pixels "dwim-shell-commands" "\
Resize marked image(s) in pixels." t)
(autoload 'dwim-shell-commands-pdf-password-protect "dwim-shell-commands" "\
Add a password to pdf(s)." t)
(autoload 'dwim-shell-commands-pdf-password-unprotect "dwim-shell-commands" "\
Remove a password from pdf(s)." t)
(autoload 'dwim-shell-commands-video-to-mp3 "dwim-shell-commands" "\
Convert video(s) to mp3." t)
(autoload 'dwim-shell-commands-video-to-mp3-with-artwork "dwim-shell-commands" "\
Convert video(s) to mp3 (keep frame as artwork)." t)
(autoload 'dwim-shell-commands-ndjson-to-org "dwim-shell-commands" "\
Convert ndjson file to org." t)
(autoload 'dwim-shell-commands-set-media-artwork-image-metadata "dwim-shell-commands" "\
Set image artwork metadata for media file(s)." t)
(autoload 'dwim-shell-commands-video-trim-beginning "dwim-shell-commands" "\
Drop audio from all marked videos." t)
(autoload 'dwim-shell-commands-video-trim-end "dwim-shell-commands" "\
Drop audio from all marked videos." t)
(autoload 'dwim-shell-commands-video-to-thumbnail "dwim-shell-commands" "\
Generate a thumbnail for marked video(s)." t)
(autoload 'dwim-shell-commands-drop-video-audio "dwim-shell-commands" "\
Drop audio from all marked videos." t)
(autoload 'dwim-shell-commands-ping-google "dwim-shell-commands" "\
Ping google.com." t)
(autoload 'dwim-shell-commands-speed-up-video "dwim-shell-commands" "\
Speed up video(s)." t)
(autoload 'dwim-shell-commands-speed-up-video-fragment "dwim-shell-commands" "\
Speed up fragment in video(s)." t)
(autoload 'dwim-shell-commands-resize-video "dwim-shell-commands" "\
Resize marked images." t)
(autoload 'dwim-shell-commands-clipboard-to-qr "dwim-shell-commands" "\
Generate a QR code from clipboard." t)
(autoload 'dwim-shell-commands-sha-256-hash-file-at-clipboard-url "dwim-shell-commands" "\
Download file at clipboard URL and generate SHA-256 hash." t)
(autoload 'dwim-shell-commands-view-sqlite-schema-diagram "dwim-shell-commands" "\
View sqlite schema diagram." t)
(autoload 'dwim-shell-commands-open-externally "dwim-shell-commands" "\
Open file(s) externally." t)
(autoload 'dwim-shell-commands-macos-caffeinate "dwim-shell-commands" "\
Invoke caffeinate to prevent mac from sleeping." t)
(autoload 'dwim-shell-commands-macos-make-finder-alias "dwim-shell-commands" "\
Make macOS Finder alias." t)
(autoload 'dwim-shell-commands-macos-version-and-hardware-overview-info "dwim-shell-commands" "\
View macOS version and hardware overview info." t)
(autoload 'dwim-shell-commands-macos-reveal-in-finder "dwim-shell-commands" "\
Reveal selected files in macOS Finder." t)
(autoload 'dwim-shell-commands-macos-share "dwim-shell-commands" "\
Share selected files from macOS." t)
(autoload 'dwim-shell-commands-macos-toggle-display-rotation "dwim-shell-commands" "\
Rotate display." t)
(autoload 'dwim-shell-commands-make-swift-package-library "dwim-shell-commands" "\
Create a swift package library" t)
(autoload 'dwim-shell-commands-make-swift-package-executable "dwim-shell-commands" "\
Create a swift package executable" t)
(autoload 'dwim-shell-commands-macos-set-default-app "dwim-shell-commands" "\
Set default app for file(s)." t)
(autoload 'dwim-shell-commands-macos-open-with "dwim-shell-commands" "\
Open file(s) with specific external app." t)
(autoload 'dwim-shell-commands-macos-open-with-firefox "dwim-shell-commands" "\
Open file(s) in Firefox." t)
(autoload 'dwim-shell-commands-macos-open-with-safari "dwim-shell-commands" "\
Open file(s) in Safari." t)
(autoload 'dwim-shell-commands-macos-start-recording-window "dwim-shell-commands" "\
Select and start recording a macOS window." t)
(autoload 'dwim-shell-commands-macos-end-recording-window "dwim-shell-commands" "\
Stop recording a macOS window." t)
(autoload 'dwim-shell-commands-macos-abort-recording-window "dwim-shell-commands" "\
Stop recording a macOS window." t)
(autoload 'dwim-shell-commands-macos-screenshot-window "dwim-shell-commands" "\
Select and screenshot macOS window." t)
(autoload 'dwim-shell-commands-files-combined-size "dwim-shell-commands" "\
Get files combined file size." t)
(autoload 'dwim-shell-commands-image-to-icns "dwim-shell-commands" "\
Convert png to icns icon." t)
(autoload 'dwim-shell-commands-image-add-drop-shadow "dwim-shell-commands" "\
Add a drop shadow." t)
(autoload 'dwim-shell-commands-image-trim-borders "dwim-shell-commands" "\
Trim image(s) border (useful for video screenshots)." t)
(autoload 'dwim-shell-commands-git-clone-clipboard-url-to-downloads "dwim-shell-commands" "\
Clone git URL in clipboard to \"~/Downloads/\"." t)
(autoload 'dwim-shell-commands-http-serve-dir "dwim-shell-commands" "\
HTTP serve current directory." t)
(autoload 'dwim-shell-commands-git-clone-clipboard-url "dwim-shell-commands" "\
Clone git URL in clipboard to `default-directory'." t)
(autoload 'dwim-shell-commands-pass-git-pull "dwim-shell-commands" "\
Pass git pull." t)
(autoload 'dwim-shell-commands-git-list-untracked-files "dwim-shell-commands" "\
List untracked git files in `default-directory'." t)
(autoload 'dwim-shell-commands-git-delete-untracked-files "dwim-shell-commands" "\
Delete untracked git files in `default-directory'." t)
(autoload 'dwim-shell-commands-external-ip "dwim-shell-commands" "\
Copy external IP to kill ring." t)
(autoload 'dwim-shell-commands-macos-install-iphone-device-ipa "dwim-shell-commands" "\
Install iPhone device .ipa.
Needs ideviceinstaller and libmobiledevice installed." t)
(autoload 'dwim-shell-commands-copy-to-downloads "dwim-shell-commands" "\
Copy file to ~/Downloads." t)
(autoload 'dwim-shell-commands-duplicate "dwim-shell-commands" "\
Duplicate file." t)
(autoload 'dwim-shell-commands-rename-all "dwim-shell-commands" "\
Rename all marked file(s)." t)
(autoload 'dwim-shell-commands-move-to-downloads "dwim-shell-commands" "\
Move file to ~/Downloads." t)
(autoload 'dwim-shell-commands-copy-to-desktop "dwim-shell-commands" "\
Copy file to ~/Desktop." t)
(autoload 'dwim-shell-commands-move-to-desktop "dwim-shell-commands" "\
Move file to ~/Desktop." t)
(autoload 'dwim-shell-commands-kill-gpg-agent "dwim-shell-commands" "\
Kill (thus restart) gpg agent.

Useful for when you get this error:

gpg: public key decryption failed: No pinentry
gpg: decryption failed: No pinentry" t)
(autoload 'dwim-shell-commands-upload-to-0x0 "dwim-shell-commands" "\
Upload the marked files to 0x0.st" t)
(register-definition-prefixes "dwim-shell-commands" '("dwim-shell-commands-"))

;;; End of scraped data

(provide 'dwim-shell-command-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; dwim-shell-command-autoloads.el ends here
